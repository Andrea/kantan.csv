package kantan.csv

import kantan.csv.laws._
import kantan.csv.laws.discipline.RowCodecTests
import kantan.csv.laws.discipline.arbitrary._
import org.scalacheck._
import org.scalacheck.Arbitrary._
import org.scalatest.FunSuite
import org.scalatest.prop.GeneratorDrivenPropertyChecks
import org.typelevel.discipline.scalatest.Discipline

object CaseClass1 {
  implicit val arb: Arbitrary[CaseClass1]  = Arbitrary(arbitrary[Int].map((CaseClass1.apply _)))
  implicit val codec: RowCodec[CaseClass1] = RowCodec.caseCodec(CaseClass1.apply)(CaseClass1.unapply)
  implicit val cogen: Cogen[CaseClass1]    = Cogen.cogenInt.contramap(_.f1)
}
case class CaseClass1(f1: Int)

[2..#object CaseClass1 {
  implicit val arb: Arbitrary[CaseClass1]  = Arbitrary(arbitrary[Tuple1[[#Int#]]].map((CaseClass1.apply _).tupled))
  implicit val codec: RowCodec[CaseClass1] = RowCodec.caseCodec([#0#])(CaseClass1.apply)(CaseClass1.unapply)
  implicit val cogen: Cogen[CaseClass1]    = Cogen.cogenList[Int].contramap(f ⇒ List([#f.f1#]))
}
case class CaseClass1([#f1: Int#])#

]

class CaseClassTests extends FunSuite with GeneratorDrivenPropertyChecks with Discipline {
  [#implicit val arbLegalCaseClass1: Arbitrary[LegalRow[CaseClass1]] =
    Arbitrary(genLegalWith1(([#i1: Int#]) ⇒ CaseClass1([#i1#]))(([#s1: String#]) ⇒ Seq([#s1#])))
  implicit val arbIllegalCaseClass1: Arbitrary[IllegalRow[CaseClass1]] =
    Arbitrary(genIllegalWith1[[#String#], [#Int#], Seq[String], CaseClass1, kantan.csv.codecs.type](([#s1#]) ⇒ Seq([#s1#])))
  checkAll("CaseClass1", RowCodecTests[CaseClass1].codec[List[String], List[Float]])#

  ]
}