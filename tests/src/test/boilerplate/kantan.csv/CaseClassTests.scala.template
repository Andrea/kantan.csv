package kantan.csv

import kantan.codecs.laws.CodecValue
import kantan.codecs.laws.CodecValue.{IllegalValue, LegalValue}
import kantan.csv.laws.discipline.RowCodecTests
import kantan.csv.laws.discipline.arbitrary._
import org.scalacheck.Arbitrary
import org.scalacheck.Arbitrary._
import org.scalatest.FunSuite
import org.scalatest.prop.GeneratorDrivenPropertyChecks
import org.typelevel.discipline.scalatest.Discipline

object CaseClass1 {
  implicit val arb = Arbitrary(arbitrary[Int].map((CaseClass1.apply _)))
  implicit val codec = RowCodec.caseCodec1(CaseClass1.apply, CaseClass1.unapply)
}
case class CaseClass1(f1: Int)

[2..#object CaseClass1 {
  implicit val arb = Arbitrary(arbitrary[Tuple1[[#Int#]]].map((CaseClass1.apply _).tupled))
  implicit val codec = RowCodec.caseCodec1(CaseClass1.apply, CaseClass1.unapply)([#0#])
}
case class CaseClass1([#f1: Int#])#

]

class CaseClassTests extends FunSuite with GeneratorDrivenPropertyChecks with Discipline {
  [#implicit val arbLegalCaseClass1: Arbitrary[LegalValue[Seq[String], CaseClass1]] =
    Arbitrary(genLegalWith1(([#i1: Int#]) ⇒ CaseClass1([#i1#]))(([#s1: String#]) ⇒ Seq([#s1#])))
  implicit val arbIllegalCaseClass1: Arbitrary[IllegalValue[Seq[String], CaseClass1]] =
    Arbitrary(genIllegalWith1[[#String#], [#Int#], Seq[String], CaseClass1](([#s1#]) ⇒ Seq([#s1#])))
  checkAll("CaseClass1", RowCodecTests[CaseClass1].codec[List[String], List[Float]])#

  ]
}