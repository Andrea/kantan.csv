package kantan.csv

trait TupleInstances {
  [#/** Provides an instance of [[RowDecoder]] for `Tuple1`, provided all internal types have an instance of [[CellDecoder]].
    *
    * {{{
    * scala> RowDecoder[Tuple1[[#Int#]]].decode(Seq([#"1"#]))
    * res0: DecodeResult[Tuple1[[#Int#]]] = Success(([#1#,]))
    * }}}
    */
   implicit def tupleDecoder1[[#A1: CellDecoder#]]: RowDecoder[Tuple1[[#A1#]]] =
    RowDecoder.ordered(Tuple1.apply[[#A1#]] _)#

  ]

  /** Provides an instance of [[RowEncoder]] for `Tuple1`, provided all internal types have an instance of [[CellEncoder]].
    *
    * {{{
    * scala> RowEncoder[Tuple1[Int]].encode(Tuple1(1))
    * res0: Seq[String] = List(1)
    * }}}
    */
  implicit def tupleEncoder1[A1: CellEncoder]: RowEncoder[Tuple1[A1]] =
    RowEncoder.ordered((t: Tuple1[A1]) ⇒ t._1)

  [2..#/** Provides an instance of [[RowEncoder]] for `Tuple1`, provided all internal types have an instance of [[CellEncoder]].
    *
    * {{{
    * scala> RowEncoder[Tuple1[[#Int#]]].encode(([#1#]))
    * res0: Seq[String] = WrappedArray([#1#])
    * }}}
    */implicit def tupleEncoder1[[#A1: CellEncoder#]]: RowEncoder[Tuple1[[#A1#]]] =
    RowEncoder.ordered((t: Tuple1[[#A1#]]) ⇒ t)#

  ]
}
