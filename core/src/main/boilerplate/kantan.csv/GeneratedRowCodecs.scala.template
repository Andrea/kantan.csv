package kantan.csv

trait GeneratedRowCodecs {
  private def combine[A](decoder: RowDecoder[A])(encoder: RowEncoder[A]): RowCodec[A] =
    RowCodec.from(decoder.decode _)(encoder.encode _)

  /** Creates a new [[RowCodec]] instance from the specified encoding and decoding functions. */
  def codec[C, A1: CellEncoder: CellDecoder](f: A1 ⇒ C)(g: C ⇒ A1): RowCodec[C] =
    combine(RowDecoder.decoder(0)(f))(RowEncoder.encoder(g))
  [2..#/** Creates a new [[RowCodec]] instance from the specified encoding and decoding functions.
    *
    * @param f encoding function.
    * @param g decoding function.
    [#* @param i1 index of the cell that should be passed as parameter number 1 of `f` and will be at index 1 of
    *           the value returned by `g`#
    ]
    */
  def codec[C, [#A1: CellEncoder: CellDecoder#]]([#i1: Int#])(f: ([#A1#]) ⇒ C)(g: C ⇒ ([#A1#])): RowCodec[C] =
    combine(RowDecoder.decoder([#i1#])(f))(RowEncoder.encoder([#i1#])(g))#
  ]

  /** Creates a new [[RowCodec]] instance from the specified encoding and decoding functions. */
  def ordered[C, A1: CellEncoder: CellDecoder](f: A1 ⇒ C)(g: C ⇒ A1): RowCodec[C] =
    combine(RowDecoder.decoder(0)(f))(RowEncoder.encoder(g))
  [2..#/** Creates a new [[RowCodec]] instance from the specified encoding and decoding functions.
    *
    * @param f encoding function.
    * @param g decoding function.
    ]
    */
  def ordered[C, [#A1: CellEncoder: CellDecoder#]](f: ([#A1#]) ⇒ C)(g: C ⇒ ([#A1#])): RowCodec[C] =
    combine(RowDecoder.ordered(f))(RowEncoder.ordered(g))#
  ]

  def caseCodec[C, A1: CellEncoder : CellDecoder](f: A1 ⇒ C)(g: C ⇒ Option[A1]): RowCodec[C] =
    combine(RowDecoder.decoder(0)(f))(RowEncoder.caseEncoder(g))
  [2..#
  def caseCodec[C, [#A1: CellEncoder : CellDecoder#]]([#i1: Int#])(f: ([#A1#]) ⇒ C)(g: C ⇒ Option[Tuple1[[#A1#]]]): RowCodec[C] =
    combine(RowDecoder.decoder([#i1#])(f))(RowEncoder.caseEncoder([#i1#])(g))#
  ]

  def caseOrdered[C, A1: CellEncoder : CellDecoder](f: A1 ⇒ C)(g: C ⇒ Option[A1]): RowCodec[C] =
    combine(RowDecoder.ordered(f))(RowEncoder.caseOrdered(g))
  [2..#
  def caseOrdered[C, [#A1: CellEncoder : CellDecoder#]](f: ([#A1#]) ⇒ C)(g: C ⇒ Option[Tuple1[[#A1#]]]): RowCodec[C] =
    combine(RowDecoder.ordered(f))(RowEncoder.caseOrdered(g))#
  ]
}
