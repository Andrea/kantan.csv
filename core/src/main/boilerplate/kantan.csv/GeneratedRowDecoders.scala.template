package kantan.csv

trait GeneratedRowDecoders {
  private def decode[A](ss: Seq[String], i: Int, da: CellDecoder[A]): DecodeResult[A] =
    if(ss.isDefinedAt(i)) da.decode(ss(i))
    else                  DecodeResult.outOfBounds(i)

  [#/** Creates a new [[RowDecoder]] from the specified function.
    *
    * @param f encoding function.
    [#* @param i1 index of the cell that should be passed as parameter number 1 of `f`#
    ]
    */
  def decoder[[#A1#], R]([#i1: Int#])(f: ([#A1#]) ⇒ R)(implicit [#a1: CellDecoder[A1]#]): RowDecoder[R] =
    RowDecoder.from(ss ⇒ for {
      [#f1 ← decode(ss, i1, a1)#
      ]
    } yield f([#f1#]))#
  ]

  [#/** Creates a new [[RowDecoder]] from the specified function. */
  def ordered[[#A1#], R](f: ([#A1#]) ⇒ R)(implicit [#a1: CellDecoder[A1]#]): RowDecoder[R] =
      decoder([#0#])(f)#
  ]
}
